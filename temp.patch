commit e509b27f35a0766a821a2452467a033d7e038476
Author: Tommy <Tommy>
Date:   Fri Oct 27 09:26:22 2023 -0700

    create function register_unhandled_rejection_handler()

diff --git a/main_background_script.js b/main_background_script.js
index 850f973..39441b3 100644
--- a/main_background_script.js
+++ b/main_background_script.js
@@ -5,15 +5,12 @@
 
 const Global = window.Global = window.Global || {};
 
-const {escalate} = Global.util;
+const {escalate, register_unhandled_rejection_handler} = Global.util;
 const {listen_for_stupid_api_calls} = Global.listen_for_stupid_api_calls;
 const {spy_on_my_tabs} = Global.spy_on_my_tabs;
 
 const main = async() => {
-  window.addEventListener("unhandledrejection", (promise_rejection_event) => {
-    console.log('tommy unhandledrejection');
-    escalate(promise_rejection_event.reason);
-  });
+  register_unhandled_rejection_handler();
 
   try {
     listen_for_stupid_api_calls();  // Launches an asynchronous thread.
diff --git a/main_content_script.js b/main_content_script.js
index 1917da8..44b86df 100644
--- a/main_content_script.js
+++ b/main_content_script.js
@@ -5,17 +5,14 @@
 
 const Global = window.Global = window.Global || {};
 
-const {escalate} = Global.util;
+const {register_unhandled_rejection_handler, escalate} = Global.util;
 const {anti_ad} = Global.anti_ad;
 const {spy_on_youtube} = Global.spy_on_youtube;
 
 console.log('main_content_script');
 
 const main = async() => {
-  window.addEventListener("unhandledrejection", (promise_rejection_event) => {
-    console.log('tommy unhandledrejection');
-    escalate(promise_rejection_event.reason);
-  });
+  register_unhandled_rejection_handler();
 
   try {
     spy_on_youtube();  // Launch async thread.
diff --git a/util.js b/util.js
index 2c5b29c..398dba8 100644
--- a/util.js
+++ b/util.js
@@ -36,8 +36,13 @@ const create_notification = ({unique_id, ...options}) => {
   if(options.message === undefined)
     throw new Error('message is undefined');
 
+  const f = chrome.notifications.create;
+
+  if(f === undefined)
+    throw new Error('chrome.notifications.create not supported');
+
   return new Promise((resolve) => {
-    chrome.notifications.create(unique_id, {
+    f(unique_id, {
       type: 'basic',
       title: 'Alert',
       iconUrl: 'x.png',
@@ -69,15 +74,29 @@ const possibly_send_notification = async() => {
   }
 };
 
-const escalate = (error) => {
+const escalate = async(error) => {
   console.log('escalate(): current timestamp', new Date().toString());
   console.error(error);
-  possibly_send_notification();
+  await possibly_send_notification();
 };
 
 const onload_promise = new Promise((resolve) => (window.addEventListener('load', resolve)));
 
-Global.util = {sleep, make_state, possibly_send_notification, storage_get, storage_set, escalate, onload_promise};
+const register_unhandled_rejection_handler = () => {
+  const handle_unhandled_rejection = (
+    async(promise_rejection_event) => {
+      try {
+        console.log('tommy unhandledrejection');
+        await escalate(promise_rejection_event.reason);
+      } catch(e) {
+        console.error('tommy already handling; ' + e.message);
+      }
+    }
+  );
+  window.addEventListener("unhandledrejection", handle_unhandled_rejection);
+};
+
+Global.util = {sleep, make_state, possibly_send_notification, storage_get, storage_set, escalate, onload_promise, register_unhandled_rejection_handler};
 
 
 })();
